<Project Sdk="Microsoft.NET.Sdk">
  <!-- Much of this configuration is taken from Microsoft documentation on how to set-up custom MSBuild tasks: https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#package-the-task-for-distribution -->
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFrameworks>net48;netstandard2.0;net8.0</TargetFrameworks>
    <Description>MSBuild runner for FluentMigrator</Description>
    <!-- The property CopyLocalLockFileAssemblies is needed to make sure that dependencies are copied to the output directory. -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <ContentTargetFolders>build</ContentTargetFolders>
    <!-- This target will run when MSBuild is collecting the files to be packaged, and we'll implement it below. This property controls the dependency list for this packaging process, so by adding our custom property we hook ourselves into the process in a supported way. -->
    <TargetsForTfmSpecificBuildOutput>
        $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
    </TargetsForTfmSpecificBuildOutput>
    <!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!-- Tell the SDK to generate a deps.json file; see target AddBuildDependencyFileToBuiltProjectOutputGroupOutput -->
    <GenerateDependencyFile>true</GenerateDependencyFile>
  </PropertyGroup>
  <!-- Nuget package properties https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets -->
  <Import Project="$(MSBuildThisFileDirectory)../../PackageTool.props" />
  <PropertyGroup>
    <DevelopmentDependency>true</DevelopmentDependency>
    <EnablePackageValidation>true</EnablePackageValidation>
    <PackageValidationBaselineVersion>6.0.0</PackageValidationBaselineVersion>
    <!-- Suppress NuGet warning NU5128. -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <!-- NU5100: We only want to package everything in a top-level build folder. -->
    <!-- NU5127: "This package does not contain a lib/ or ref/ folder, and will therefore be treated as compatible for all frameworks."; this is exactly the behavior we want. -->
    <!-- NU5129: We want to package FluentMigrator.MSBuild.targets -->
    <!-- PKV006: .NET Framework 4.8 is not supported by package validation. -->
    <NoWarn>$(NoWarn);NU5100;NU5127;NU5129;PKV006</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <None Include="build/**/*.targets">
      <PackagePath>build/%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <Pack>true</Pack>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\FluentMigrator.Runner\FluentMigrator.Runner.csproj" PrivateAssets="all" />
  </ItemGroup>
  <ItemGroup Condition=" '$(TargetFramework)' == 'net48' ">
    <Reference Include="System.Configuration" />
  </ItemGroup>

  <!-- Dependencies -->
  <!-- mark every dependency of this Task project, both PackageReference and ProjectReference with the PrivateAssets="all" attribute. -->
  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.8.3" PrivateAssets="all" ExcludeAssets="Runtime" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Update="JetBrains.Annotations" Version="2024.2.0" PrivateAssets="all" />
  </ItemGroup>

  <!-- This is the target we defined above. It's purpose is to add all of our PackageReference and ProjectReference's runtime assets to our package output.  -->
  <Target
    Name="CopyProjectReferencesToPackage"
    DependsOnTargets="ResolveReferences">
    <ItemGroup>
        <!-- The TargetPath is the path inside the package that the source file will be placed. This is already precomputed in the ReferenceCopyLocalPaths items' DestinationSubPath, so reuse it here. -->
        <BuildOutputInPackage
            Include="@(ReferenceCopyLocalPaths)"
            TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
  </Target>

  <!-- This target adds the generated deps.json file to our package output -->
  <Target
        Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput"
        BeforeTargets="BuiltProjectOutputGroup"
        Condition=" '$(GenerateDependencyFile)' == 'true'">
     <ItemGroup>
        <BuiltProjectOutputGroupOutput
            Include="$(ProjectDepsFilePath)"
            TargetPath="$(ProjectDepsFileName)"
            FinalOutputPath="$(ProjectDepsFilePath)" />
    </ItemGroup>
  </Target>

</Project>
